[{"/Users/wangxiang/Desktop/internal-starter-template/src/index.tsx":"1","/Users/wangxiang/Desktop/internal-starter-template/src/reportWebVitals.ts":"2","/Users/wangxiang/Desktop/internal-starter-template/src/App.tsx":"3","/Users/wangxiang/Desktop/internal-starter-template/src/pages/index.tsx":"4","/Users/wangxiang/Desktop/internal-starter-template/src/config.tsx":"5","/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/page-layout/index.tsx":"6","/Users/wangxiang/Desktop/internal-starter-template/src/pages/profile/index.tsx":"7","/Users/wangxiang/Desktop/internal-starter-template/src/pages/setting/index.tsx":"8","/Users/wangxiang/Desktop/internal-starter-template/src/pages/page-404/index.tsx":"9","/Users/wangxiang/Desktop/internal-starter-template/src/pages/home/index.tsx":"10","/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/widgets/page-header/index.tsx":"11","/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/widgets/page-sidebar/index.tsx":"12","/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/post-form/index.tsx":"13","/Users/wangxiang/Desktop/internal-starter-template/src/shared/hooks/useMediaWidth.ts":"14","/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/widgets/page-menu/index.tsx":"15","/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/widgets/page-nav-drawer/index.tsx":"16","/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/widgets/user-avatar/index.tsx":"17","/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/post-form/field-label/index.tsx":"18","/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/post-form/responsive-form-row/index.tsx":"19","/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/loading/index.tsx":"20"},{"size":501,"mtime":1609044119920,"results":"21","hashOfConfig":"22"},{"size":436,"mtime":1609044076302,"results":"23","hashOfConfig":"22"},{"size":147,"mtime":1609046319241,"results":"24","hashOfConfig":"22"},{"size":1109,"mtime":1609045533110,"results":"25","hashOfConfig":"22"},{"size":794,"mtime":1609044982973,"results":"26","hashOfConfig":"22"},{"size":821,"mtime":1609044577188,"results":"27","hashOfConfig":"22"},{"size":128,"mtime":1609044749472,"results":"28","hashOfConfig":"22"},{"size":128,"mtime":1609044749499,"results":"29","hashOfConfig":"22"},{"size":124,"mtime":1609044749447,"results":"30","hashOfConfig":"22"},{"size":333,"mtime":1609044749425,"results":"31","hashOfConfig":"22"},{"size":1160,"mtime":1609044577197,"results":"32","hashOfConfig":"22"},{"size":2257,"mtime":1609044577202,"results":"33","hashOfConfig":"22"},{"size":12577,"mtime":1609044577192,"results":"34","hashOfConfig":"22"},{"size":777,"mtime":1609045882751,"results":"35","hashOfConfig":"22"},{"size":1910,"mtime":1609044577199,"results":"36","hashOfConfig":"22"},{"size":1248,"mtime":1609044577200,"results":"37","hashOfConfig":"22"},{"size":1751,"mtime":1609044577204,"results":"38","hashOfConfig":"22"},{"size":362,"mtime":1609044577191,"results":"39","hashOfConfig":"22"},{"size":311,"mtime":1609044577194,"results":"40","hashOfConfig":"22"},{"size":244,"mtime":1609045456636,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"7k1vrb",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/wangxiang/Desktop/internal-starter-template/src/index.tsx",[],["85","86","87","88","89","90"],"/Users/wangxiang/Desktop/internal-starter-template/src/reportWebVitals.ts",[],"/Users/wangxiang/Desktop/internal-starter-template/src/App.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/pages/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/config.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/page-layout/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/pages/profile/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/pages/setting/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/pages/page-404/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/pages/home/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/widgets/page-header/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/widgets/page-sidebar/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/post-form/index.tsx",["91"],"import {\n  Input, Form, DatePicker, Button, Radio, TimePicker, Switch,\n} from \"antd\";\nimport {\n  Field, Formik, Form as FormikForm, FieldProps,\n} from \"formik\";\n// import Form from \"antd/lib/form/Form\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport moment, { Moment } from \"moment\";\nimport isEmpty from \"lodash.isempty\";\nimport {\n  CloseOutlined, DeleteFilled, FacebookFilled,\n  InstagramFilled,\n  MailFilled, SaveOutlined, TwitterSquareFilled,\n} from \"@ant-design/icons\";\nimport ResponsiveFormRow from \"./responsive-form-row\";\nimport FieldLabel from \"./field-label\";\n\ninterface PostFormProps {\n    sections: any[];\n    onFetch?: ()=>Promise<any>;\n    onSave?: (values: any)=>Promise<any>;\n    onCancel?: (values: any)=>Promise<any>;\n    onSubmit?: (values: any)=>Promise<any>;\n    onDelete?: (values: any)=>Promise<any>;\n\n}\n\nconst FormSchema = Yup.object().shape({\n  slug: Yup.string().required(\"required\"),\n  story_url: Yup.string().required(\"Field cannot be empty!\").url(\"Not a valid url! (Hint: Make sure to include http)\"),\n  post_facebook: Yup.string(),\n  post_twitter: Yup.string().max(200, \"Cannot exceed 200 characters!\"),\n  post_newsletter: Yup.string(),\n  post_notes: Yup.string(),\n  post_instagram: Yup.string(),\n  post_date: Yup.string().required(\"required\")\n    .test(\"checkDate\", \"Cannot select a date earlier than today!\", (value) => {\n      const dateMoment = moment(value, \"MM-DD-YYYY\");\n      const nowMoment = moment(moment().format(\"MM-DD-YYYY\"), \"MM-DD-YYYY\");\n      if (dateMoment.unix() >= nowMoment.unix()) {\n        return true;\n      }\n      return false;\n    }),\n\n  pub_ready_online: Yup.bool(),\n  pub_ready_copy: Yup.bool(),\n  pub_time: Yup.string().required(\"required\"),\n  section: Yup.number().nullable().required(\"value is not provided\"),\n\n});\n\nconst PostForm: React.FC<PostFormProps> = (props) => {\n  const {\n    sections, onFetch, onCancel, onDelete, onSave, onSubmit,\n  } = props;\n\n  return (\n    <Formik\n      initialValues={{\n        slug: \"\",\n        story_url: \"\",\n        post_date: \"\",\n        pub_time: \"\",\n        section: null,\n        post_facebook: \"\",\n        post_twitter: \"\",\n        post_newsletter: \"\",\n        post_notes: \"\",\n        post_instagram: \"\",\n        pub_ready_copy: false,\n        pub_ready_online: false,\n      }}\n      validationSchema={FormSchema}\n      onSubmit={(values: any) => {\n        console.log(values);\n      }}\n    >\n      {({ errors, touched, values }) => (\n\n        <FormikForm action=\"test\" className=\"ant-form ant-form-horizontal\">\n\n          <Field\n            name=\"slug\"\n          >\n            {({ field, form }: any) => {\n              return (\n                <Form.Item\n                  style={{\n                    display: \"block\",\n                  }}\n                  label={<FieldLabel text=\"Slug\" />}\n                  validateStatus={form.errors.slug && form.touched.slug ? \"error\" : \"\"}\n                  help={form.errors.slug && touched.slug ? form.errors.slug : null}\n                >\n                  <Input\n                    id=\"slug\"\n                    placeholder=\"Type slug here\"\n                    onChange={field.onChange}\n                    onBlur={field.onBlur}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Field>\n          <Field\n            name=\"story_url\"\n          >\n            {({ field, form }: any) => {\n              return (\n                <Form.Item\n                  style={{\n                    display: \"block\",\n                  }}\n                  label={<FieldLabel text=\"Url\" />}\n                  validateStatus={form.errors.story_url && form.touched.story_url ? \"error\" : \"\"}\n                  help={form.errors.story_url && touched.story_url ? form.errors.story_url : null}\n                >\n                  <Input\n                    placeholder=\"https://dailybruin.com/...\"\n                    id=\"story_url\"\n                    onChange={field.onChange}\n                    onBlur={field.onBlur}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Field>\n          <ResponsiveFormRow>\n            <Field\n              name=\"post_date\"\n            >\n              {({ field, form }: FieldProps) => {\n                return (\n                  <Form.Item\n                    label={<FieldLabel text=\"Post date\" />}\n                    validateStatus={form.errors.post_date && form.touched.post_date ? \"error\" : \"\"}\n                    help={form.errors.post_date && touched.post_date ? form.errors.post_date : null}\n                  >\n                    <DatePicker\n                      id=\"post_date\"\n                      onChange={(date: Moment|null, dateString: string) => {\n                        form.setFieldValue(\"post_date\", dateString, true);\n                      }}\n                      format=\"MM-DD-YYYY\"\n                      onBlur={field.onBlur}\n                    />\n                  </Form.Item>\n                );\n              }}\n            </Field>\n            <Field\n              name=\"pub_time\"\n            >\n              {({ field, form }: FieldProps) => {\n                return (\n                  <Form.Item\n                    label={<FieldLabel text=\"Post time\" />}\n                    validateStatus={form.errors.pub_time && form.touched.pub_time ? \"error\" : \"\"}\n                    help={form.errors.pub_time && touched.pub_time ? form.errors.pub_time : null}\n                  >\n                    <TimePicker\n                      use12Hours\n                      format=\"h:mm a\"\n                      id=\"pub_time\"\n                      onChange={(x, timeString) => {\n                        form.setFieldValue(\"pub_time\", moment(timeString, \"LT\").format(\"HH:mm:ss\"));\n                      }}\n                      onBlur={field.onBlur}\n                    />\n                  </Form.Item>\n                );\n              }}\n            </Field>\n          </ResponsiveFormRow>\n          <Field\n            name=\"section\"\n          >\n            {({ field, form }: FieldProps) => {\n              return (\n                <Form.Item\n                  label={<FieldLabel text=\"Sections\" />}\n                  validateStatus={form.errors.section && form.touched.section ? \"error\" : \"\"}\n                  help={form.errors.section && touched.section ? form.errors.section : null}\n                >\n                  <Radio.Group onChange={(e) => {\n                    form.setFieldValue(\"section\", e.target.value, true);\n                  }}\n                  >\n                    {sections.map((item: any) => {\n                      const { id, name } = item;\n                      return (\n                        <Radio\n                          key={id}\n                          value={id}\n                        >\n                          {name}\n                        </Radio>\n                      );\n                    })}\n                  </Radio.Group>\n                </Form.Item>\n              );\n            }}\n          </Field>\n          <Field\n            name=\"post_facebook\"\n          >\n            {({ field, form }: any) => {\n              return (\n                <Form.Item\n                  label={<FieldLabel text=\"Facebook\" icon={<FacebookFilled />} />}\n                  style={{\n                    display: \"block\",\n                  }}\n                >\n                  <Input.TextArea\n                    rows={4}\n                    id=\"post_facebook\"\n                    onChange={field.onChange}\n                    onBlur={field.onBlur}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Field>\n          <Field\n            name=\"post_twitter\"\n          >\n            {({ field, form }: any) => {\n              return (\n                <Form.Item\n                  style={{\n                    display: \"block\",\n                  }}\n                  label={<FieldLabel text=\"Twitter\" icon={<TwitterSquareFilled />} />}\n                  validateStatus={errors.post_twitter && touched.post_twitter ? \"error\" : \"\"}\n                  help={errors.post_twitter && touched.post_twitter ? errors.post_twitter : null}\n                >\n                  <Input.TextArea\n                    rows={4}\n                    showCount\n                    maxLength={200}\n                    id=\"post_twitter\"\n                    onChange={field.onChange}\n                    onBlur={field.onBlur}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Field>\n          <Field\n            name=\"post_instagram\"\n          >\n            {({ field, form }: any) => {\n              return (\n                <Form.Item\n                  style={{\n                    display: \"block\",\n                  }}\n                  label={<FieldLabel text=\"Instagram\" icon={<InstagramFilled />} />}\n                >\n                  <Input.TextArea\n                    rows={4}\n                    id=\"post_instagram\"\n                    onChange={field.onChange}\n                    onBlur={field.onBlur}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Field>\n          <Field\n            name=\"post_notes\"\n          >\n            {({ field, form }: any) => {\n              return (\n                <Form.Item\n                  style={{\n                    display: \"block\",\n                  }}\n                  label={<FieldLabel text=\"Notes\" />}\n                >\n                  <Input.TextArea\n                    rows={4}\n                    id=\"post_notes\"\n                    onChange={field.onChange}\n                    onBlur={field.onBlur}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Field>\n\n          <Field\n            name=\"post_newsletter\"\n          >\n            {({ field, form }: any) => {\n              return (\n                <Form.Item\n                  style={{\n                    display: \"block\",\n                  }}\n                  label={<FieldLabel text=\"Newsletter\" />}\n                >\n                  <Input.TextArea\n                    rows={4}\n                    id=\"post_newsletter\"\n                    onChange={field.onChange}\n                    onBlur={field.onBlur}\n                  />\n                </Form.Item>\n              );\n            }}\n          </Field>\n          <ResponsiveFormRow>\n            <Field\n              name=\"pub_ready_copy\"\n            >\n              {({ field, form }: any) => {\n                return (\n                  <Form.Item\n                    label={<FieldLabel text=\"Copy-edited\" />}\n                  >\n                    <Switch\n                      checked={field.value}\n                      onChange={(val) => {\n                        form.setFieldValue(\"pub_ready_copy\", val);\n                      }}\n                    />\n                  </Form.Item>\n                );\n              }}\n            </Field>\n            <Field\n              name=\"pub_ready_online\"\n            >\n              {({ field, form }: any) => {\n                return (\n                  <Form.Item\n                    label={<FieldLabel text=\"Ready to publish\" />}\n                  >\n                    <Switch\n                      checked={field.value}\n                      onChange={(val) => {\n                        form.setFieldValue(\"pub_ready_online\", val);\n                      }}\n                    />\n                  </Form.Item>\n                );\n              }}\n            </Field>\n          </ResponsiveFormRow>\n          <ResponsiveFormRow>\n            <Form.Item>\n              <Button style={{ marginRight: 10 }} icon={<MailFilled />} htmlType=\"submit\" type=\"primary\">Post now</Button>\n              <Button icon={<DeleteFilled />} danger type=\"primary\">Delete</Button>\n            </Form.Item>\n            <Form.Item>\n              <Button\n                onClick={() => {\n                  onSave && onSave(values);\n                }}\n                style={{ marginRight: 10 }}\n                icon={<SaveOutlined />}\n              >\n                Save\n              </Button>\n              <Button\n                onClick={() => {\n                  onCancel && onCancel(values);\n                }}\n                icon={<CloseOutlined />}\n                danger\n              >\n                Cancel changes\n              </Button>\n            </Form.Item>\n          </ResponsiveFormRow>\n        </FormikForm>\n      )}\n    </Formik>\n  );\n};\n\nexport default PostForm;\n","/Users/wangxiang/Desktop/internal-starter-template/src/shared/hooks/useMediaWidth.ts",[],"/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/widgets/page-menu/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/widgets/page-nav-drawer/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/widgets/user-avatar/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/post-form/field-label/index.tsx",[],"/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/post-form/responsive-form-row/index.tsx",[],["92","93","94","95","96","97"],"/Users/wangxiang/Desktop/internal-starter-template/src/shared/components/loading/index.tsx",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":78,"column":9,"nodeType":"112","messageId":"113","endLine":78,"endColumn":20},{"ruleId":"98","replacedBy":"114"},{"ruleId":"100","replacedBy":"115"},{"ruleId":"102","replacedBy":"116"},{"ruleId":"104","replacedBy":"117"},{"ruleId":"106","replacedBy":"118"},{"ruleId":"108","replacedBy":"119"},"lines-around-directive",["120"],"no-spaced-func",["121"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected",["120"],["121"],[],[],[],[],"padding-line-between-statements","func-call-spacing"]